version: '3'

services:
    zookeeper:
        image: confluentinc/cp-zookeeper:latest
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
    kafka:
        image: confluentinc/cp-kafka:latest
        depends_on:
            - zookeeper
        ports:
            - '9092:9092'
            - '9094:9094'
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
            KAFKA_LISTENERS: INTERNAL://:9092,OUTSIDE://:9094
            KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://host.docker.internal:9094
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
    kafka-topics-generator:
        image: confluentinc/cp-kafka:latest
        depends_on:
            - kafka
        command: >
            bash -c
              "sleep 5s &&
              kafka-topics --create --topic=tp.test --if-not-exists --bootstrap-server=kafka:9092 &&
              kafka-topics --create --topic=tp.store --if-not-exists --bootstrap-server=kafka:9092"
    kowl:
        image: quay.io/cloudhut/kowl:v1.2.2
        restart: on-failure
        hostname: kowl
        depends_on:
            - kafka
        ports:
            - '9021:8080'
        volumes:
            - ./docker/kowl/config.yaml:/etc/kowl/config.yaml
        entrypoint: ./kowl --config.filepath=/etc/kowl/config.yaml
    mysql:
        build:
            context: ./docker/mysql
        environment:
            MYSQL_DATABASE: 'cashback'
            MYSQL_USER: 'loyalty'
            MYSQL_PASSWORD: 'loyalty'
            MYSQL_ROOT_PASSWORD: 'root'
            TZ: 'America/Sao_Paulo'
        volumes:
            - mysql-data:/var/lib/mysql
            - ./docker/mysql/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
        ports:
            - '3306:3306'
    adminer:
        image: adminer
        ports:
            - "8083:8080"
        depends_on:
            - mysql
    elasticsearch:
        build:
            context: ./docker/elasticsearch
        volumes:
            - elasticsearch:/usr/share/elasticsearch/data
        environment:
            - cluster.name=cashback-sales-consumer
            - node.name=cashback-sales-consumer-node
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
            - cluster.initial_master_nodes=cashback-sales-consumer-node
        ports:
            - "9200:9200"
            - "9300:9300"
    logstash:
        build:
            context: ./docker/logstash
        volumes:
            - './docker/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml'
            - './docker/logstash/pipeline:/usr/share/logstash/pipeline'
        ports:
            - '5001:5001'
        environment:
            LS_JAVA_OPTS: '-Xmx1g -Xms1g'
        depends_on:
            - elasticsearch
    kibana:
        build:
            context: ./docker/kibana
        ports:
            - "5601:5601"
        depends_on:
            - elasticsearch
    mongodb:
        image: mongo:3.6
        ports:
            - '27017:27017'
        environment:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: root
        volumes:
            - mongodb-data:/data/db
    mongo-express:
        image: mongo-express
        container_name: mongo-express
        ports:
          - 8082:8082
        depends_on:
          - mongodb
        environment:
          ME_CONFIG_MONGODB_SERVER: mongodb
          ME_CONFIG_MONGODB_PORT: 27017
          ME_CONFIG_MONGODB_ADMINUSERNAME: root
          ME_CONFIG_MONGODB_ADMINPASSWORD: root
          VCAP_APP_PORT: 8082
    mqtt:
        image: eclipse-mosquitto
        container_name: mqtt
        ports:
          - 9001:9001
          - 1883:1883
        volumes:
        - .docker/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
    redis:
        image: redis:5
        container_name: redis
        ports:
          - 6379:6379
    redis-commander:
        image: rediscommander/redis-commander
        container_name: redis-commander
        ports:
          - 8081:8081
        environment:
          REDIS_HOSTS: local:redis:6379
        depends_on:
          - redis

networks:
    default:
        driver: bridge
        ipam:
            config:
                - subnet: 172.16.57.0/24
volumes:
    mysql-data:
        driver: local
    elasticsearch:
        driver: local
    mongodb-data:
        driver: local
